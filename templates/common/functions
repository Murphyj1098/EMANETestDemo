#!/bin/bash -

start_emane()
{
    local node_name=$1
    local xml=$2
    local logfile=$3
    local pidfile=$4
    local uuidfile=$5

    if [ -f $xml ]; then

        echo "$node_name: starting emane: $xml"

        emane "$xml" -r -d -l 3 -f "$logfile" \
                --pidfile "$pidfile" --uuidfile "$uuidfile"

        retval=$?

    else
        echo "$node_name: missing emane XML: $xml [!!]"
        retval=1
    fi

    return $retval
}

start_olsr()
{
    local node_name=$1
    local routingconf=$2
    local logfile=$3

    echo "$node_name: starting olsr: $routingconf"
    olsrd -f "$routingconf" &> "$logfile"
}

start_emaneeventd_and_wait_for_gpspty()
{
    local node_name=$1
    local xml=$2
    local logfile=$3
    local pidfile=$4
    local uuidfile=$5
    local pty=$6

    if [ -f xml ]; then

        echo "$node_name: starting emaneeventd: $xml"

        rm -f "$pty"

        emaneeventd -r -d "$xml" -l 3 -f "$logfile" \
                    --pidfile "$pidfile" --uuidfile "$uuidfile"

        retval=$?

        if [[ $retval == 0 ]]; then

            while (! test -f "$pty")
            do
                echo "$node_name: Waiting for GPS Location PTY: $pty"
                sleep 1
            done
        fi

    else
        echo "$node_name: missing emaneeventd XML: $xml [!!]"
        retval=1
    fi

    return $retval
}

start_gpsd()
{
    local node_name=$1
    local pty=$2
    local pidfile=$3
    
    echo "$node_name: starting gpsd: $pty"
    gpsd -P $pidfile -G -n -b `cat $pty`
}

wait_for_gpspty()
{
    local node_name=$1
    local pty=$2

    echo "$node_name: waiting for GPS Location PTY: $pty"

    while (! test -f "$pty")
    do
        sleep 1
    done

    echo "$node_name: found GPS Location PTY: $pty"

    return $0
}

start_emaneeventservice()
{
    local node_name=$1
    local xml=$2
    local logfile=$3
    local pidfile=$4
    local uuidfile=$5
    local starttime="$6"

    local startoption=""

    if [ -n "$starttime" ]; then
        startoption="--starttime $(date --date "$starttime" "+%H:%M:%S")"
    fi

    if [ -f $xml ]; then

        echo "$node_name: starting emaneeventservice: $xml at $starttime"

        emaneeventservice -d "$xml" -l 3 -f "$logfile" \
                          --pidfile "$pidfile" --uuidfile "$uuidfile" \
                          $startoption

        retval=$?

    else
        echo "$node_name: missing emaneeventservice XML: $xml [!!]"
        retval=1
    fi

    return $retval
}

start_otestpointd()
{
    local node_name=$1
    local xml=$2
    local logfile=$3
    local pidfile=$4
    local uuidfile=$5

    if [ -f $xml ]; then

        echo "$node_name: starting otestpointd: $xml"

        otestpointd "$xml" -d -l 3 -f "$logfile" \
                    --pidfile "$pidfile" --uuidfile "$uuidfile"

        retval=$?

    else
        echo "$node_name: missing otestpointd XML: $xml [!!]"
        retval=1
    fi

    return $retval
}

start_otestpoint_recorder()
{
    local node_name=$1
    local xml=$2
    local logfile=$3
    local pidfile=$4
    local uuidfile=$5

    if [ -f $xml ]; then

        echo "$node_name: starting otestpoint-recorder: $xml"

        otestpoint-recorder "$xml" -d -l 3 -f "$logfile" \
                            --pidfile "$pidfile" --uuidfile "$uuidfile"

        retval=$?
    
    else
        echo "$node_name: missing otestpoint-recorder XML: $xml [!!]"
        retval=1
    fi

    return $retval
}

start_otestpoint_broker()
{
    local node_name=$1
    local xml=$2
    local logfile=$3
    local pidfile=$4
    local uuidfile=$5

    if [ -f $xml ]; then

        echo "$node_name: starting otestpoint-broker: $xml"

        otestpoint-broker "$xml" -d -l 3 -f "$logfile" \
                          --pidfile "$pidfile" --uuidfile "$uuidfile"

        retval=$?

    else
        echo "$node_name: missing otestpoint-broker XML: $xml [!!]"
        retval=1
    fi

    return $retval
}

start_emane_spectrum_monitor()
{
    local node_name=$1
    local xml=$2
    local logfile=$3
    local pidfile=$4
    local uuidfile=$5

    if [ -f $xml ]; then

        echo "$node_name: starting emane-spectrum-monitor: $xml"

        emane-spectrum-monitor --config "$xml" -r -d -l 3 -f "$logfile" \
              --pidfile "$pidfile" --uuidfile "$uuidfile"

        retval=$?
    else
        echo "$node_name: missing emane-spectrum-monitor XML: $xml [!!]"
        retval=1
    fi

    return $retval
}

start_mgen()
{
    local node_name=$1
    local mgeninput=$2
    local mgenoutput=$3
    local pidfile=$4
    local logfile=$5
    local start_utc="$6"

    local startoption=""

    if [ -n "$start_utc" ]; then
        startoption="start $(date --date "$start_utc" "+%H:%M:%S" --utc)GMT"
        echo "$node_name: starting mgen input $mgeninput output $mgenoutput $startoption"
    else
        echo "$node_name: starting mgen input $mgeninput output $mgenoutput now"
    fi

    nohup mgen             \
          input $mgeninput   \
          output $mgenoutput \
          $startoption       \
          txlog &> $logfile &

    echo $! > $pidfile
}

start_iperf()
{
    local node_name=$1
    local inputfile=$2
    local logfile=$3
    local pidfile=$4
    local starttime="$5"

    # iperf servers do not wait for start time
    if (! grep -q '\-s ' $inputfile)
    then
        start=$(date --date "$starttime" "+%s")

        while [[ $(date "+%s") -lt $start ]]
        do
            sleep 1
        done
    fi

    echo "$node_name starting iperf: $inputfile at $starttime"

    nohup iperf $(head -n 1 $inputfile) &> $logfile &

    echo $! > $pidfile
}


wait_for_device()
{
    local node_name=$1
    local device=$2
    local timeout=$3
    local waited=0

    echo "$node_name: waiting for $device"

    while(! ip route show | grep -q $device); do

        if [ $waited -lt $timeout ]; then
            sleep 1
            waited=$(($waited + 1))
        else
            echo "$node_name: $device not found [!!]"
            return 1
        fi
    done

    echo "$node_name: $device found"
    return 0
}

wait_for_device_ip_link()
{
    local node_name=$1
    local device=$2
    local timeout=$3
    local waited=0

    echo "$node_name: waiting for $device"

    while(! ip link show $device &> /dev/null); do

        if [ $waited -lt $timeout ]; then
            sleep 1
            waited=$(($waited + 1))
        else
            echo "$node_name: $device not found [!!]"
            return 1
        fi
    done

    echo "$node_name: $device found"
    return 0
}

wait_for_tcp_service()
{
    local node_name=$1
    local port=$2
    local timeout=$3
    local waited=0


    echo "$node_name: waiting for TCP service port $port"

    while(! netstat -tpan | grep -q $port); do

        if [ $waited -lt $timeout ]; then
            sleep 1
            waited=$(($waited + 1))
        else
            echo "$node_name: port $port not found [!!]"
            return 1
        fi
    done


    echo "$node_name: port $port found"
    return 0
}

load_arp_cache()
{
    local node_name=$1
    local device=$2
    local ethers=$3

    echo "$node_name: load_arp_cache $ethers $device"

    arp -i $device -f "$ethers"
}